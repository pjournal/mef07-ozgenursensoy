[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ozgenur Sensoy Progress Journal",
    "section": "",
    "text": "Introduction\n\nThis progress journal covers [Özgenur Şensoy / PROJECT GROUP NAME haven’t decided yet]’s work during their term at BDA 503 Fall 2022.\nEach section is an assignment or an individual work."
  },
  {
    "objectID": "assignment1.html",
    "href": "assignment1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "2 | About Me\nHello folks!\nI’m Özgenur Şensoy, MSc in Big Data Analytics. I graduated from MEF University from the Department of Elementary Mathematics Education. Since I did not feel like I belonged there during my internships, I switched to data analytics where I could be more productive. I want to put my data science skills into practice in a few companies that I dream of. In addition, I want to progress by nourishing my knowledge with courses on artificial intelligence.\nLinkedIn Profile\n\n\n3 | Yotube Video\n\n3.0.1 Data Visualization\n\n\n\nTeaching R online with RStudio Cloud\nI chose to watch the video titled “Data visualization and plotting with Shiny for Python || Carson Sievert || RStudio” The video covers how to create interactive data visualization using Shiny, Python, and Pandas. Here are the key topics:\nLayout and Slider: At the beginning of the video, we learn how to lay out a user interface and add interactive elements such as sliders using Shiny. This allows users to interact with data or graphs.\nReactive Calculations :The term “Reactive calculations” refers to the ability of users to make calculations based on data. For example, you can create a structure where the calculations are automatically updated when a user changes the slider.\nRender Plot: Specifies how to render and update graphics or plots to be displayed to the user. Data-driven charts can refresh automatically as users interact.\nPandas Plotting: Pandas is a widely used library for data analysis and manipulation in Python. The video could possibly also cover how to analyze data using DataFrames and how to use Pandas’ plotting capabilities.\nThe video explains how you can create an app with an interactive graphic. This implementation seems to change the number of bars in the calculated histogram when you change a slider. The video shows you how to layout such interactive applications using “layout sidebar”, a subpackage of Shiny. This allows users to make the data and chart more interactive. Additionally, “reactive calculations” and “render plot” topics are also discussed in the video. “Reactive calculations” appears to be a feature that defines how calculations can be performed based on input values. “Render plot” explains how to create and display graphics. This shows how you can create different types of plots interactively using plot libraries such as Matplotlib. The video also provides examples using different graphics packages, for example showing how packages such as Seaborn, Plotnine, Pandas, Hollowvies, xarray and geopandas can be used. It looks like this video might offer useful information to those interested in data visualization using Shiny and Python.\n======= # | Dataset (2022-23 Salaries of NBA Players)\nNBA players’ salaries dataset is the data set containing the salaries of all NBA players. Contains salary, position, team, and age information for each player. Additionally, it provides details on the minutes played by players and their success percentage per period.\nKey Features:\n\nPlayer Information\nPer Game Statistics\nShooting Efficiency\nAdvanced Statistics\nSalaries\n\nData Source: This dataset merges player per-game and advanced statistics for the NBA’s 2022-23 season with player salary data, creating a comprehensive resource for understanding the performance and financial aspects of professional basketball players. The dataset is the result of web scraping player salary information from Hoopshype, and downloading traditional per-game and advanced statistics from Basketball Reference.\nPotential Uses:\n\nPlayer Performance Analysis\nTeam Budgeting and Strategy\nPlayer Earnings Insights\nData-Driven Decisions\n\nAccess: For access official website.\n\n\n\n\n4 | Three R Posts\n\n4.0.1 1- Mastering Data Visualization in R\nThis R data visualization guide provides an overview of the various techniques, libraries, and best practices for creating visually stunning visuals that effectively communicate your data insights. You will be better equipped to explore, analyze, and present your data findings in a compelling and engaging manner if you master data visualization in R. Whether you’re a seasoned data analyst or just starting out, the world of data visualization in R offers limitless opportunities to maximize the value of your data.\nPost Link\n\n\n4.0.2 2- Human Resources Analytics: Exploring Employee Data in R\nThis analysis focuses on recruiting data, specifically in the sales department, and examines various recruitment channels. It involves loading the dataset, giving an overview of the data, and identifying the sources used for recruitment. Attrition rates are also assessed for each recruitment source to pinpoint those with high and low turnover. The results are presented through bar charts for easy interpretation.\nTo evaluate the effectiveness of each recruitment channel in producing top salespeople, we calculate the average sales quota attainment for hires from each source.\n#Find the average sales quota attainment for each recruiting source avg_sales &lt;- recruitment %&gt;%\ngroup_by(recruiting_source) %&gt;%\nsummarize(avg_sales_quota_pct = mean(sales_quota_pct))\n#Display the result avg_sales\n=======\nThis analysis focuses on recruiting data, specifically in the sales department, and examines various recruitment channels. It involves loading the dataset, giving an overview of the data, and identifying the sources used for recruitment. Attrition rates are also assessed for each recruitment source to pinpoint those with high and low turnover. The results are presented through bar charts for easy interpretation.\nTo evaluate the effectiveness of each recruitment channel in producing top salespeople, we calculate the average sales quota attainment for hires from each source.\n#Find the average sales quota attainment for each recruiting source avg_sales &lt;- recruitment %&gt;%\ngroup_by(recruiting_source) %&gt;%\nsummarize(avg_sales_quota_pct = mean(sales_quota_pct))\n#Display the result avg_sales\nFor More\n\n\n4.0.3 3- Default Parameter Value\nThe following example shows how to use a default parameter value.\nIf we call the function without an argument, it uses the default value:\nExample my_function &lt;- function(country = “Norway”) { paste(“I am from”, country)\n}\nmy_function(“Sweden”) my_function(“India”) my_function() # will get the default value, which is Norway my_function(“USA”)\nFor More"
  },
  {
    "objectID": "InClass1.html",
    "href": "InClass1.html",
    "title": "2  InClass1",
    "section": "",
    "text": "2.0.1 Air Quality\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nair_data &lt;- as_tibble(airquality)\nhead(air_data)\n\n# A tibble: 6 × 6\n  Ozone Solar.R  Wind  Temp Month   Day\n  &lt;int&gt;   &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1    41     190   7.4    67     5     1\n2    36     118   8      72     5     2\n3    12     149  12.6    74     5     3\n4    18     313  11.5    62     5     4\n5    NA      NA  14.3    56     5     5\n6    28      NA  14.9    66     5     6\n\n\n\nfiltered_data &lt;- air_data %&gt;% filter(Ozone &gt; 31)\nprint(filtered_data)\n\n# A tibble: 58 × 6\n   Ozone Solar.R  Wind  Temp Month   Day\n   &lt;int&gt;   &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1    41     190   7.4    67     5     1\n 2    36     118   8      72     5     2\n 3    34     307  12      66     5    17\n 4    32      92  12      61     5    24\n 5    45     252  14.9    81     5    29\n 6   115     223   5.7    79     5    30\n 7    37     279   7.4    76     5    31\n 8    71     291  13.8    90     6     9\n 9    39     323  11.5    87     6    10\n10    37     284  20.7    72     6    17\n# ℹ 48 more rows\n\n\n\nsummary_data &lt;- air_data %&gt;%\n  summarise(Avg_Ozone = mean(Ozone, na.rm = TRUE))\nprint(summary_data)\n\n# A tibble: 1 × 1\n  Avg_Ozone\n      &lt;dbl&gt;\n1      42.1\n\n\n\narranged_data &lt;- air_data %&gt;%\n  arrange(Wind)\nprint(arranged_data)\n\n# A tibble: 153 × 6\n   Ozone Solar.R  Wind  Temp Month   Day\n   &lt;int&gt;   &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1    NA      59   1.7    76     6    22\n 2   118     225   2.3    94     8    29\n 3    73     183   2.8    93     9     3\n 4   168     238   3.4    81     8    25\n 5   122     255   4      89     8     7\n 6   135     269   4.1    84     7     1\n 7    NA      91   4.6    76     6    23\n 8    64     175   4.6    83     7     5\n 9    66      NA   4.6    87     8     6\n10    91     189   4.6    93     9     4\n# ℹ 143 more rows"
  },
  {
    "objectID": "InClass2.html",
    "href": "InClass2.html",
    "title": "3  InClass2",
    "section": "",
    "text": "3.0.1 Air Quality\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\n\n\nggplot(airquality, aes(x = Wind, y = Ozone, color = factor(Month))) +\n  geom_point(size = 3) +\n  labs(title = \"Scatter Plot of Wind Speed vs. Ozone Concentration by Month\",\n       x = \"Wind Speed\",\n       y = \"Ozone Concentration\",\n       color = \"Month\") +\n  theme_minimal()\n\nWarning: Removed 37 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\nggplot(airquality, aes(x = factor(Month), y = Ozone, fill = factor(Month))) +\n  geom_bar(stat = \"summary\", fun = \"mean\", position = \"dodge\", color = \"black\") +\n  labs(title = \"Average Ozone Concentration by Month\",\n       x = \"Month\",\n       y = \"Average Ozone Concentration\") +\n  theme_minimal()\n\nWarning: Removed 37 rows containing non-finite values (`stat_summary()`)."
  },
  {
    "objectID": "ShinyApp.html#command-line",
    "href": "ShinyApp.html#command-line",
    "title": "4  Shiny App",
    "section": "4.1 Command Line",
    "text": "4.1 Command Line\nshiny::runGitHub(repo = \"pjournal//mef07-ozgenursensoy\",subdir=\"Shiny/app.R\")"
  }
]